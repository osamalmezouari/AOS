datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Personel {
  id                     String               @id
  matricule              Int                  @unique
  nom_fr                 String               @unique
  nom_ar                 String
  prenom_ar              String
  prenom_fr              String
  password               String
  naissance              String
  email                  String               @unique
  echelle                Int
  isAdmin                Boolean?             @default(false)
  /// Relation to Affectation
  Affectation            Affectation          @relation(fields: [AffectationId], references: [id])
  AffectationId          String
  // Relation to sutiation_familiale
  sutuiation_familiale   sutuiation_familiale @relation(fields: [sutuiation_familialeId], references: [id])
  sutuiation_familialeId String
  // Relation to roles
  roles                  Roles                @relation(fields: [roleId], references: [id])
  roleId                 String               @default("1")
  /// Relation to demande estivage
  demandeEstivage        DemandeEstivage[]
  demandeCredit          demandeCredit[]
  demandePelerinage      demandePelerinage[]
  retrait                retrait[]
  demamdeMaladies        demamdeMaladies[]
  demandeLang            demandeLang[]
  condoleance            demandeCondoleance[]
  Zoo                    Zoo[]
  rentreeScolaire        rentreeScolaire[]
  demandeExcursion       demandeExcursion[]
  mariage                mariage[]
  inscreption            inscreption[]
  Naissance              naissance[]
  enfants                enfants[]
  demandesport           demandeSport[]
  demandehanicape        demandeHandicape[]
}

model sutuiation_familiale {
  id        String     @id
  sutiation String
  personel  Personel[]
}

model enfants {
  id         String   @id
  nom_ar     String
  nom_fr     String
  naissance  DateTime
  sexe       String
  personel   Personel @relation(fields: [personelId], references: [id])
  personelId String
}

model Roles {
  id             String                  @id
  role           String                  @unique
  sousactivities Rolesonsousactivities[]
  personel       Personel[]
}

model Rolesonsousactivities {
  role            Roles        @relation(fields: [roleId], references: [id])
  roleId          String
  sousActivitie   SousActivite @relation(fields: [sousActivitieId], references: [id])
  sousActivitieId String

  @@unique([sousActivitieId, roleId])
}

model Affectation {
  id            String     @id
  structureAr   String     @db.Text
  StructureFr   String     @db.Text
  abrviation    String
  TypeStructure String
  /// Relation to Personel
  personel      Personel[]
}

model Activitie {
  id             String         @id
  nomAr          String
  nomFr          String
  ///Relation to sousActivites
  SousActivities SousActivite[]

  @@unique([nomFr, nomAr])
}

model SousActivite {
  id                    String                   @id
  nomAr                 String
  nomFr                 String
  descriptionAr         String                   @db.Text
  descriptionFr         String                   @db.Text
  imgUrl                String                   @db.Text
  /// Relation activite
  activite              Activitie                @relation(fields: [activiteId], references: [id])
  activiteId            String
  pieces                SousActivitiesOnPieces[]
  demandeEsstivage      DemandeEstivage[]
  demandeCredit         demandeCredit[]
  demandePelerinage     demandePelerinage[]
  retrait               retrait[]
  demamdeMaladies       demamdeMaladies[]
  demandeLang           demandeLang[]
  condoleance           demandeCondoleance[]
  Zoo                   Zoo[]
  demandeExcursion      demandeExcursion[]
  inscreption           inscreption[]
  mariage               mariage[]
  naissance             naissance[]
  rentreeScolaire       rentreeScolaire[]
  Rolesonsousactivities Rolesonsousactivities[]
  demandeSport          demandeSport[]
  demandeHandicape      demandeHandicape[]

  @@unique([nomFr, nomAr])
}

model SousActivitiesOnPieces {
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
  piece          Pieces       @relation(fields: [pieceId], references: [id])
  pieceId        String

  @@id([sousActiviteId, pieceId])
}

model Pieces {
  id             String                   @id
  nomAr          String                   @db.Text
  nomFr          String                   @db.Text
  ///Relation to sousActivites
  SousActivities SousActivitiesOnPieces[]
}

model DemandeEstivage {
  id             String       @id
  date_entre     String
  date_sortie    String
  Status         String?
  effet          DateTime     @default(now())
  appartementId  String?
  description    String
  montant        Int?
  montantAloue   Int?
  type           String
  /// Relation to centres
  centre         Centre       @relation(fields: [centreId], references: [id])
  centreId       String       @default("0")
  /// Relation to Personel
  personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  /// Relation to relation
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model demandeSport {
  id             String       @id
  montant        Int
  enfant         String
  montantAlloue  Int?
  Status         String?
  effet          DateTime     @default(now())
  annee          Int
  observation    String?      @db.Text
  ///relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  ///relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model demandeHandicape {
  id             String       @id
  montant        Int?
  enfant         String
  description    String
  Status         String?
  effet          DateTime     @default(now())
  observation    String?      @db.Text
  ///relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  ///relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model Centre {
  id              String            @id
  centreAr        String            @db.Text
  centreFr        String            @db.Text
  imgUrl          String            @db.Text
  /// Relation to demamnde estivage
  demandeEstivage DemandeEstivage[]
  /// Relation to ville
  Vile            Vile              @relation(fields: [vileId], references: [id])
  vileId          String
  /// Relation to Appartements
  appartements    Appartement[]
}

model Appartement {
  id       String @id
  numero   Int
  /// Relation to centers
  centre   Centre @relation(fields: [centreId], references: [id])
  centreId String
}

model demandeCredit {
  id          String   @id
  montant     Int
  description String   @db.Text
  Status      String?
  effet       DateTime @default(now())
  observation String?  @db.Text

  ///relation to Personel
  Personel   Personel @relation(fields: [personelId], references: [id])
  personelId String

  ///relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model demandePelerinage {
  id          String   @id
  annee       Int
  effet       DateTime @default(now())
  observation String?  @db.Text
  Status      String?
  ///relation to Personel
  Personel    Personel @relation(fields: [personelId], references: [id])
  personelId  String

  ///relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model retrait {
  id          String   @id
  date        String
  montant     Int?
  Status      String?
  effet       DateTime @default(now())
  observation String?  @db.Text

  ///relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  ///relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model demamdeMaladies {
  id             String       @id
  montant        Int?
  Decription     String       @db.Text
  Status         String?
  effet          DateTime     @default(now())
  observation    String?      @db.Text
  ///relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  ///relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model demandeLang {
  id             String       @id
  effet          DateTime     @default(now())
  description    String       @db.Text
  Status         String?
  observation    String?      @db.Text
  /// relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  /// relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model demandeCondoleance {
  id                String          @id
  montant           Int?
  description       String          @db.Text
  Status            String?
  effet             DateTime        @default(now())
  observation       String?         @db.Text
  ///relation to condoleance
  typeCondoleance   typeCondoleance @relation(fields: [typeCondoleanceId], references: [id])
  typeCondoleanceId String
  /// relation to Personel
  Personel          Personel        @relation(fields: [personelId], references: [id])
  personelId        String
  /// relation to Personel
  SousActivite      SousActivite    @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId    String
}

model typeCondoleance {
  id          String               @id
  nomFr       String
  nomAr       String
  condoleance demandeCondoleance[]
}

model Zoo {
  id             String       @id
  date           String
  adulte         Int
  enfant         Int
  Status         String?
  effet          DateTime     @default(now())
  description    String
  observation    String?
  ///relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  ///relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model mariage {
  id             String       @id
  description    String       @db.Text
  effet          DateTime     @default(now())
  Status         String?
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  montant        Int?
  observation    String?      @db.Text
}

model demandeExcursion {
  id             String       @id
  Status         String?
  effet          DateTime     @default(now())
  observation    String?      @db.Text
  /// relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  /// relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
  Excursion      Excursion    @relation(fields: [ExcursionId], references: [id])
  ExcursionId    String
}

model Vile {
  id             String      @id
  vileAr         String
  vileFr         String
  // Relation to centers
  centres        Centre[]
  excursionsFrom Excursion[] @relation("excursionsFromVile")
  excursionsTo   Excursion[] @relation("excursionsToVile")

  @@unique([vileAr, vileFr])
}

model Excursion {
  id               String             @id
  nom              String
  Description      String             @db.Text
  imgUrl           String             @db.Text
  Date             BigInt
  montant          Int?
  nombre           Int
  startVile        Vile               @relation("excursionsFromVile", fields: [vileStartId], references: [id])
  vileStartId      String
  endVile          Vile               @relation("excursionsToVile", fields: [vileEndId], references: [id])
  vileEndId        String
  demandeExcursion demandeExcursion[]
}

model naissance {
  id             String       @id
  Date           String
  montant        Int?
  nombre         Int
  Status         String?
  effet          DateTime     @default(now())
  observation    String?      @db.Text
  /// relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  /// relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model rentreeScolaire {
  id             String       @id
  Date           String
  montant        Int?
  nombre         Int
  Status         String?
  effet          DateTime     @default(now())
  observation    String?      @db.Text
  /// relation to Personel
  Personel       Personel     @relation(fields: [personelId], references: [id])
  personelId     String
  /// relation to Personel
  SousActivite   SousActivite @relation(fields: [sousActiviteId], references: [id])
  sousActiviteId String
}

model inscreption {
  id              String       @id
  annee           Int
  status          Boolean      @default(false)
  effet           DateTime     @default(now())
  // relation with personel
  Personel        Personel     @relation(fields: [personelId], references: [id])
  personelId      String
  // relation with SousActivitie
  SousActivite    SousActivite @relation(fields: [SousActivitieId], references: [id])
  SousActivitieId String
}
